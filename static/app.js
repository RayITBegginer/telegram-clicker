// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const clickButton = document.getElementById('click-button');
const clicksElement = document.getElementById('clicks');
const clickPowerElement = document.getElementById('click-power');
const passiveIncomeElement = document.getElementById('passive-income');
const inventoryButton = document.getElementById('toggle-inventory');
const inventoryContainer = document.getElementById('inventory');

// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ URL
const urlParams = new URLSearchParams(window.location.search);
const userId = urlParams.get('user_id');

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
async function sendAction(action, data = {}) {
    try {
        const response = await fetch(`/api/${action}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, ...data })
        });
        return await response.json();
    } catch (error) {
        console.error(`Error in ${action}:`, error);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
clickButton.addEventListener('click', () => {
    const currentClicks = parseInt(clicksElement.textContent) || 0;
    const clickPower = parseInt(clickPowerElement.textContent) || 1;
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    clicksElement.textContent = currentClicks + clickPower;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendAction('click');
});

// –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏–ª—ã –∫–ª–∏–∫–∞
document.getElementById('upgrade-click').addEventListener('click', async () => {
    const currentClicks = parseInt(clicksElement.textContent) || 0;
    const cost = parseInt(document.getElementById('click-cost').textContent) || 50;
    
    if (currentClicks >= cost) {
        const result = await sendAction('upgrade_click');
        if (result && !result.error) {
            clicksElement.textContent = result.clicks;
            clickPowerElement.textContent = result.click_power;
            document.getElementById('click-cost').textContent = 
                Math.floor(50 * Math.pow(1.5, result.click_power - 1));
        }
    }
});

// –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
document.getElementById('upgrade-passive').addEventListener('click', async () => {
    const currentClicks = parseInt(clicksElement.textContent) || 0;
    const cost = parseInt(document.getElementById('passive-cost').textContent) || 100;
    
    if (currentClicks >= cost) {
        const result = await sendAction('upgrade_passive');
        if (result && !result.error) {
            clicksElement.textContent = result.clicks;
            passiveIncomeElement.textContent = result.passive_income;
            document.getElementById('passive-cost').textContent = 
                Math.floor(100 * Math.pow(1.5, result.passive_income));
        }
    }
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫—Å–∞ —Å –ø–∏—Ç–æ–º—Ü–µ–º
document.getElementById('box-button').addEventListener('click', async () => {
    const currentClicks = parseInt(clicksElement.textContent) || 0;
    
    if (currentClicks >= 500) {
        const result = await sendAction('box');
        if (result && result.success) {
            updateInventory(result.user_stats);
            const pet = result.pet_info;
            alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: ${pet.name}!\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–ª–∏–∫–∞: x${pet.click_multiplier}\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞: x${pet.passive_multiplier}\n–†–µ–¥–∫–æ—Å—Ç—å: ${pet.rarity}`);
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
async function equipPet(pet) {
    const result = await sendAction('equip_pet', { pet });
    if (result && !result.error) {
        updateInventory(result);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        loadStats();
    }
}

async function unequipPet(pet) {
    const result = await sendAction('unequip_pet', { pet });
    if (result && !result.error) {
        updateInventory(result);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è
        loadStats();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function updateInventory(data) {
    if (!data || !data.inventory) return;
    
    const petsElement = document.getElementById('equipped-pets');
    const equippedCount = document.getElementById('equipped-count');
    petsElement.innerHTML = '';
    
    equippedCount.textContent = data.equipped_pets ? data.equipped_pets.length : 0;
    
    data.inventory.forEach(pet => {
        const petCard = document.createElement('div');
        petCard.className = 'pet-card';
        petCard.dataset.pet = pet;
        
        const isEquipped = data.equipped_pets && data.equipped_pets.includes(pet);
        if (isEquipped) petCard.classList.add('equipped');
        
        fetch('/api/pets')
            .then(response => response.json())
            .then(pets => {
                const petInfo = pets[pet];
                petCard.innerHTML = `
                    <div class="pet-info">
                        üêæ ${pet}
                        <div class="pet-stats">
                            –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–ª–∏–∫–∞: x${petInfo.click_multiplier}
                            –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ—Ö–æ–¥–∞: x${petInfo.passive_multiplier}
                            –†–µ–¥–∫–æ—Å—Ç—å: ${petInfo.rarity}
                        </div>
                    </div>
                    <button onclick="${isEquipped ? 'unequipPet' : 'equipPet'}('${pet}')"
                            ${!isEquipped && data.equipped_pets && data.equipped_pets.length >= 2 ? 'disabled' : ''}>
                        ${isEquipped ? '–°–Ω—è—Ç—å' : '–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å'}
                    </button>
                `;
            });
        
        petsElement.appendChild(petCard);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
inventoryButton.addEventListener('click', () => {
    inventoryContainer.classList.toggle('active');
});

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
setInterval(() => {
    const passiveIncome = parseInt(passiveIncomeElement.textContent) || 0;
    if (passiveIncome > 0) {
        const currentClicks = parseInt(clicksElement.textContent) || 0;
        clicksElement.textContent = currentClicks + passiveIncome;
        sendAction('passive_income');
    }
}, 1000);

// –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
async function loadStats() {
    try {
        const response = await fetch(`/api/stats?user_id=${userId}`);
        const data = await response.json();
        if (data) {
            clicksElement.textContent = data.clicks;
            clickPowerElement.textContent = data.click_power;
            passiveIncomeElement.textContent = data.passive_income;
            
            document.getElementById('click-cost').textContent = 
                Math.floor(50 * Math.pow(1.5, data.click_power - 1));
            document.getElementById('passive-cost').textContent = 
                Math.floor(100 * Math.pow(1.5, data.passive_income));
            
            updateInventory(data);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                sendAction('stats', data);
            }, 30000);
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadStats(); 