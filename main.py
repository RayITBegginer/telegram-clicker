import asyncio
import json
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import os
from dotenv import load_dotenv
from keyboards import get_webapp_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

load_dotenv()

bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open('users.json', 'r') as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

# –ü–∏—Ç–æ–º—Ü—ã –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
pets = {
    'cat': {'name': '–ö–æ—Ç', 'click_power': 2, 'passive_income': 1, 'rarity': 'common'},
    'dog': {'name': '–°–æ–±–∞–∫–∞', 'click_power': 3, 'passive_income': 2, 'rarity': 'common'},
    'dragon': {'name': '–î—Ä–∞–∫–æ–Ω', 'click_power': 5, 'passive_income': 3, 'rarity': 'rare'},
    'unicorn': {'name': '–ï–¥–∏–Ω–æ—Ä–æ–≥', 'click_power': 7, 'passive_income': 4, 'rarity': 'rare'},
    'phoenix': {'name': '–§–µ–Ω–∏–∫—Å', 'click_power': 10, 'passive_income': 5, 'rarity': 'epic'}
}

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ –±–æ–∫—Å–æ–≤
box_chances = {
    'common': 0.7,
    'rare': 0.25,
    'epic': 0.05
}

BOX_COST = 500

def save_users():
    with open('users.json', 'w') as f:
        json.dump(users, f)

def create_user(user_id):
    if str(user_id) not in users:
        users[str(user_id)] = {
            'clicks': 0,
            'click_power': 1,
            'passive_income': 0,
            'inventory': [],
            'equipped_pets': []
        }
        save_users()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    create_user(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ URL
    webapp_url = f"{os.getenv('WEBAPP_URL')}?user_id={user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å",
            web_app=WebAppInfo(url=webapp_url)
        )]
    ])
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–ª–∏–∫–µ—Ä.\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        reply_markup=keyboard
    )

@dp.message(Command('click'))
async def cmd_click(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –ø–∏—Ç–æ–º—Ü–µ–≤
    click_power = users[user_id]['click_power']
    for pet_type in users[user_id]['equipped_pets']:
        click_power += pets[pet_type]['click_power']
    
    users[user_id]['clicks'] += click_power
    save_users()
    
    await message.answer(f"–ö–ª–∏–∫! +{click_power}\n–í—Å–µ–≥–æ: {users[user_id]['clicks']} –∫–ª–∏–∫–æ–≤")

@dp.message(Command('box'))
async def cmd_box(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    if users[user_id]['clicks'] < BOX_COST:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {BOX_COST}")
        return
    
    users[user_id]['clicks'] -= BOX_COST
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞
    rarity = random.choices(
        list(box_chances.keys()),
        list(box_chances.values())
    )[0]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    possible_pets = [pet_type for pet_type, pet in pets.items() if pet['rarity'] == rarity]
    pet_type = random.choice(possible_pets)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    users[user_id]['inventory'].append(pet_type)
    save_users()
    
    await message.answer(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: {pets[pet_type]['name']}!\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n"
        f"–ö–ª–∏–∫: +{pets[pet_type]['click_power']}\n"
        f"–ü–∞—Å—Å–∏–≤: +{pets[pet_type]['passive_income']}"
    )

@dp.message(Command('inventory'))
async def cmd_inventory(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    if not users[user_id]['inventory']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /box —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞.")
        return
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    pet_counts = {}
    for pet_type in users[user_id]['inventory']:
        pet_counts[pet_type] = pet_counts.get(pet_type, 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
    inventory_list = []
    for i, (pet_type, count) in enumerate(pet_counts.items(), 1):
        status = "üü¢" if pet_type in users[user_id]['equipped_pets'] else "‚ö™"
        inventory_list.append(
            f"{status} {i}. {pets[pet_type]['name']} (x{count})\n"
            f"‚îî –ö–ª–∏–∫: +{pets[pet_type]['click_power']}, "
            f"–ü–∞—Å—Å–∏–≤: +{pets[pet_type]['passive_income']}"
        )
    
    await message.answer(
        f"–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:\n\n"
        f"{chr(10).join(inventory_list)}\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/equip [–Ω–æ–º–µ—Ä] - —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞\n"
        f"/unequip [–Ω–æ–º–µ—Ä] - —Å–Ω—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
    )

@dp.message(Command('equip'))
async def cmd_equip(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    try:
        pet_index = int(message.text.split()[1]) - 1
        available_pets = list(set(users[user_id]['inventory']))
        pet_type = available_pets[pet_index]
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /equip [–Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è]")
        return
    
    if len(users[user_id]['equipped_pets']) >= 2:
        await message.answer("–£–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤ (2)!")
        return
    
    if pet_type in users[user_id]['equipped_pets']:
        await message.answer(f"{pets[pet_type]['name']} —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!")
        return
    
    users[user_id]['equipped_pets'].append(pet_type)
    save_users()
    
    await message.answer(f"–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ {pets[pet_type]['name']}!")

@dp.message(Command('unequip'))
async def cmd_unequip(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    try:
        pet_index = int(message.text.split()[1]) - 1
        pet_type = users[user_id]['equipped_pets'][pet_index]
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unequip [–Ω–æ–º–µ—Ä —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞]")
        return
    
    users[user_id]['equipped_pets'].remove(pet_type)
    save_users()
    
    await message.answer(f"–í—ã —Å–Ω—è–ª–∏ {pets[pet_type]['name']}!")

@dp.message(Command('stats'))
async def cmd_stats(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    stats = users[user_id]
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å–∏–ª—ã –∫–ª–∏–∫–∞ –∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    total_click_power = stats['click_power']
    total_passive_income = stats['passive_income']
    
    for pet_type in stats['equipped_pets']:
        total_click_power += pets[pet_type]['click_power']
        total_passive_income += pets[pet_type]['passive_income']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
    pets_list = "\n".join([f"- {pets[pet]['name']}" for pet in stats['equipped_pets']]) if stats['equipped_pets'] else "–ù–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤"
    
    await message.answer(
        f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ö–ª–∏–∫–∏: {stats['clicks']}\n"
        f"–û–±—â–∞—è —Å–∏–ª–∞ –∫–ª–∏–∫–∞: {total_click_power}\n"
        f"–û–±—â–∏–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {total_passive_income}/—Å–µ–∫\n"
        f"\n–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:\n{pets_list}"
    )

# –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
async def passive_income():
    while True:
        for user_id in users:
            passive = users[user_id]['passive_income']
            for pet_type in users[user_id]['equipped_pets']:
                passive += pets[pet_type]['passive_income']
            users[user_id]['clicks'] += passive
        save_users()
        await asyncio.sleep(1)

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))