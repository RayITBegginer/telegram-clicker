import asyncio
import json
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import os
from dotenv import load_dotenv
from keyboards import get_webapp_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from database import Database

load_dotenv()

bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
db = Database()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open('users.json', 'r') as f:
        users = json.load(f)
except FileNotFoundError:
    users = {}

# –ü–∏—Ç–æ–º—Ü—ã –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
pets = {
    'cat': {'name': '–ö–æ—Ç', 'click_power': 2, 'passive_income': 1, 'rarity': 'common'},
    'dog': {'name': '–°–æ–±–∞–∫–∞', 'click_power': 3, 'passive_income': 2, 'rarity': 'common'},
    'dragon': {'name': '–î—Ä–∞–∫–æ–Ω', 'click_power': 5, 'passive_income': 3, 'rarity': 'rare'},
    'unicorn': {'name': '–ï–¥–∏–Ω–æ—Ä–æ–≥', 'click_power': 7, 'passive_income': 4, 'rarity': 'rare'},
    'phoenix': {'name': '–§–µ–Ω–∏–∫—Å', 'click_power': 10, 'passive_income': 5, 'rarity': 'epic'}
}

# –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ –±–æ–∫—Å–æ–≤
box_chances = {
    'common': 0.7,
    'rare': 0.25,
    'epic': 0.05
}

BOX_COST = 500

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
PETS = {
    '–ö–æ—Ç–µ–Ω–æ–∫': {'name': '–ö–æ—Ç–µ–Ω–æ–∫', 'click_power': 1, 'rarity': '–û–±—ã—á–Ω—ã–π'},
    '–©–µ–Ω–æ–∫': {'name': '–©–µ–Ω–æ–∫', 'click_power': 1, 'rarity': '–û–±—ã—á–Ω—ã–π'},
    '–•–æ–º—è–∫': {'name': '–•–æ–º—è–∫', 'click_power': 2, 'rarity': '–†–µ–¥–∫–∏–π'},
    '–ü–æ–ø—É–≥–∞–π': {'name': '–ü–æ–ø—É–≥–∞–π', 'click_power': 2, 'rarity': '–†–µ–¥–∫–∏–π'},
    '–ï–¥–∏–Ω–æ—Ä–æ–≥': {'name': '–ï–¥–∏–Ω–æ—Ä–æ–≥', 'click_power': 3, 'rarity': '–≠–ø–∏—á–µ—Å–∫–∏–π'},
    '–î—Ä–∞–∫–æ–Ω': {'name': '–î—Ä–∞–∫–æ–Ω', 'click_power': 5, 'rarity': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'}
}

def save_users():
    with open('users.json', 'w') as f:
        json.dump(users, f)

def create_user(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    if str(user_id) not in db.users:
        db.users[str(user_id)] = {
            'clicks': 0,
            'click_power': 1,
            'passive_income': 0,
            'equipped_pets': [],
            'inventory': [],
            'achievements': {
                'clicks_made': 0,
                'boxes_opened': 0,
                'pets_collected': 0
            },
            'last_save': None
        }
        db.save()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ URL
    webapp_url = f"{os.getenv('WEBAPP_URL')}?user_id={user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å",
            web_app=WebAppInfo(url=webapp_url)
        )]
    ])
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–ª–∏–∫–µ—Ä.\n"
        "üéØ –ö–ª–∏–∫–∞–π, —É–ª—É—á—à–∞–π, —Å–æ–±–∏—Ä–∞–π –ø–∏—Ç–æ–º—Ü–µ–≤!\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        reply_markup=keyboard
    )

@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ:\n\n"
        "üñ± –ö–ª–∏–∫–∞–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏\n"
        "üí™ –£–ª—É—á—à–∞–π —Å–∏–ª—É –∫–ª–∏–∫–∞\n"
        "‚ö°Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥\n"
        "üéÅ –û—Ç–∫—Ä—ã–≤–∞–π –±–æ–∫—Å—ã —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏\n"
        "üêæ –ü–∏—Ç–æ–º—Ü—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–∏–ª—É –∫–ª–∏–∫–∞\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )
    await message.answer(help_text)

@dp.message(Command('click'))
async def cmd_click(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –ø–∏—Ç–æ–º—Ü–µ–≤
    click_power = users[user_id]['click_power']
    for pet_type in users[user_id]['equipped_pets']:
        click_power += pets[pet_type]['click_power']
    
    users[user_id]['clicks'] += click_power
    save_users()
    
    await message.answer(f"–ö–ª–∏–∫! +{click_power}\n–í—Å–µ–≥–æ: {users[user_id]['clicks']} –∫–ª–∏–∫–æ–≤")

@dp.message(Command('box'))
async def cmd_box(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    if users[user_id]['clicks'] < BOX_COST:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {BOX_COST}")
        return
    
    users[user_id]['clicks'] -= BOX_COST
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞
    rarity = random.choices(
        list(box_chances.keys()),
        list(box_chances.values())
    )[0]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    possible_pets = [pet_type for pet_type, pet in pets.items() if pet['rarity'] == rarity]
    pet_type = random.choice(possible_pets)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    users[user_id]['inventory'].append(pet_type)
    save_users()
    
    await message.answer(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: {pets[pet_type]['name']}!\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {rarity}\n"
        f"–ö–ª–∏–∫: +{pets[pet_type]['click_power']}\n"
        f"–ü–∞—Å—Å–∏–≤: +{pets[pet_type]['passive_income']}"
    )

@dp.message(Command('inventory'))
async def cmd_inventory(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user_stats(user_id)
    
    if not user or not user.get('inventory'):
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤!")
        return
    
    pets_text = "–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:\n"
    for pet in user['inventory']:
        pet_info = pets[pet]
        pets_text += f"‚Ä¢ {pet_info['name']} (–°–∏–ª–∞: +{pet_info['click_power']})\n"
    
    await message.answer(pets_text)

@dp.message(Command('equip'))
async def cmd_equip(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    try:
        pet_index = int(message.text.split()[1]) - 1
        available_pets = list(set(users[user_id]['inventory']))
        pet_type = available_pets[pet_index]
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /equip [–Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è]")
        return
    
    if len(users[user_id]['equipped_pets']) >= 2:
        await message.answer("–£–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤ (2)!")
        return
    
    if pet_type in users[user_id]['equipped_pets']:
        await message.answer(f"{pets[pet_type]['name']} —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!")
        return
    
    users[user_id]['equipped_pets'].append(pet_type)
    save_users()
    
    await message.answer(f"–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ {pets[pet_type]['name']}!")

@dp.message(Command('unequip'))
async def cmd_unequip(message: types.Message):
    user_id = str(message.from_user.id)
    create_user(user_id)
    
    try:
        pet_index = int(message.text.split()[1]) - 1
        pet_type = users[user_id]['equipped_pets'][pet_index]
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unequip [–Ω–æ–º–µ—Ä —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞]")
        return
    
    users[user_id]['equipped_pets'].remove(pet_type)
    save_users()
    
    await message.answer(f"–í—ã —Å–Ω—è–ª–∏ {pets[pet_type]['name']}!")

@dp.message(Command('stats'))
async def cmd_stats(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in db.users:
        user = db.users[user_id]
        stats_text = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üí∞ –ö–ª–∏–∫–∏: {user['clicks']}\n"
            f"üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user['click_power']}\n"
            f"‚ö°Ô∏è –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {user['passive_income']}/—Å–µ–∫\n"
            f"üêæ –ü–∏—Ç–æ–º—Ü–µ–≤: {len(user['inventory'])}\n"
            f"üë• –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {len(user['equipped_pets'])}\n\n"
            f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            f"üëÜ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['achievements']['clicks_made']}\n"
            f"üì¶ –ë–æ–∫—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: {user['achievements']['boxes_opened']}\n"
            f"üåü –ü–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user['achievements']['pets_collected']}"
        )
        await message.answer(stats_text)
    else:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

@dp.message(Command('top'))
async def cmd_top(message: types.Message):
    leaderboard = db.get_leaderboard(limit=10)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
    
    if not leaderboard:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª! –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üéÆ")
        return
    
    text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, player in enumerate(leaderboard, 1):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
        medal = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}.get(i, '‚Ä¢')
        
        text += (
            f"{medal} {i}. ID: {player['user_id']}\n"
            f"   üí∞ –ë–∞–ª–∞–Ω—Å: {player['clicks']}\n"
            f"   üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {player['click_power']}\n"
            f"   üêæ –ü–∏—Ç–æ–º—Ü–µ–≤: {player['pets_count']}\n\n"
        )
    
    await message.answer(text)

# –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
async def passive_income():
    while True:
        for user_id in users:
            passive = users[user_id]['passive_income']
            for pet_type in users[user_id]['equipped_pets']:
                passive += pets[pet_type]['passive_income']
            users[user_id]['clicks'] += passive
        save_users()
        await asyncio.sleep(1)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())